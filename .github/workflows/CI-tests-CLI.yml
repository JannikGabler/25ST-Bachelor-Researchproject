#name: Python Tests
#
#on:
#  pull_request:
#
#jobs:
#  test:
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v4
#
#      - name: Set up Python 3.13
#        uses: actions/setup-python@v4
#        with:
#          python-version: 3.13
#
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
#
#      - name: Run tests for CLI project
#        env:
#          PYTHONPATH: ${{ github.workspace }}/cli_project
#        run: |
#          set +e  # Fehler sollen die Schleife nicht abbrechen
#          FAILED_TESTS=()
#
#          for test_file in $(find cli_project/tests -name "*.py"); do
#            echo "Running $test_file"
#            python -m unittest "$test_file"
#            if [ $? -ne 0 ]; then
#              FAILED_TESTS+=("$test_file")
#            fi
#          done
#
#          echo ""
#          if [ ${#FAILED_TESTS[@]} -ne 0 ]; then
#            echo "==== Failed Tests ===="
#            for test in "${FAILED_TESTS[@]}"; do
#              echo "$test"
#            done
#            exit 1
#          else
#            echo "All tests passed!"
#          fi

name: Python tests (CLI project)

on:
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v4
        with:
          python-version: 3.13

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run tests for CLI project
        env:
          PYTHONPATH: ${{ github.workspace }}/cli_project
        run: |
          set +e
          FAILED_TESTS=()
          
          for test_file in $(find cli_project/tests -name "*.py"); do
            echo "Running $test_file"
            python -m unittest "$test_file"
            if [ $? -ne 0 ]; then
              FAILED_TESTS+=("$test_file")
            fi
          done
          
          echo ""
          if [ ${#FAILED_TESTS[@]} -ne 0 ]; then
            echo "==== Failed Tests ===="
            for test in "${FAILED_TESTS[@]}"; do
              echo "$test"
            done
            exit 1
          else
            echo "All tests passed!"
          fi
